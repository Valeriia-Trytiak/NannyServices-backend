datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  roles Role[]
  Token Token[]
  rewiews Review[]
  favorites NannyUserFavorite[]  
  appointments Appointment[]
  createAt DateTime @default(now()) @map("created_at")
  updateAt DateTime @updatedAt @map("updated_at")
@@map("users")
}

model Token {
  token String @unique
  exp DateTime
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  userAgent String @map("user_agent")
  @@map("tokens")
}

model Nanny {
  id              Int      @id @default(autoincrement())
  name            String
  avatarUrl       String
  birthday        DateTime
  experience      String
  education       String
  kidsAge         String
  pricePerHour    Int
  location        String
  about           String
  rating          Float
  characters      String[]
  
  reviews         Review[]
  favorites     NannyUserFavorite[]
  appointments Appointment[]
  
   @@map("nannys")
}

model Review {
  id              Int      @id @default(autoincrement())
  rating          Float
  comment         String
  
  reviewer        User     @relation(fields: [reviewerId], references: [id])
  reviewerId      String
  
  nanny           Nanny    @relation(fields: [nannyId], references: [id])
  nannyId         Int
   @@map("reviews")
}

model NannyUserFavorite {
  id        Int    @id @default(autoincrement())
  nanny     Nanny  @relation(fields: [nannyId], references: [id])
  nannyId   Int
  user      User   @relation(fields: [userId], references: [id])
  userId    String

  @@map("nanny_user_favorites")
}

model Appointment {
  id Int @id @default(autoincrement())
  nanny       Nanny    @relation(fields: [nannyId], references: [id])
  nannyId     Int
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  address     String
  phoneNumber String
  email       String
  username    String
  time        DateTime
  childAge    String
  comment     String?
  status AppointmentStatus @default(pending)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
@@map("appointments")
}

enum Role {
  ADMIN
  USER 
  }

  enum AppointmentStatus {
  pending
  confirmed
  rejected
}